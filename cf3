#!/usr/bin/env python3
# extract features from web pages for further classification
import sys
import math
import hashlib

from lxml import html

"""
Fields for the hash:

ts: title size
mc: meta count
sc: script count
tl: len of tag vector
hs: head size (rounded)
bs: body size (rounded)
sz: total size(rounded)
"""

def main(f:"str", verbose=False):
    c = get_content(f)
    try:
        t = get_tree(c)
    except Exception:
        print("ERROR parsing:", f)
        raise
    try:
        calculate_hash(c, t, verbose)
    except Exception:
        print("ERROR hashing:", f)
        raise

def get_content(f:"str") -> "unicode":
    with open(f, 'rb') as ff:
        return ff.read()

def get_tree(c:"str"):
    return html.fromstring(c)

def get_tag_vector(tree) -> "list":
    return [node.tag for node in tree.iter('*')]

def get_tag_count(tag:"str", tv:"list") -> "int":
    return len([x for x in tv if x == tag])

def get_title_size(tree):
    title = tree.find(".//title")
    if title is None:
        return 0
    return len(title.text) if title.text is not None else 0

def get_head_size(tree):
    try:
        return len(tree.head.text_content())
    except IndexError:
        return 0

def get_body_size(tree):
    try:
        return len(tree.body.text_content())
    except IndexError:
        return 0

def get_fingerprint(mc, sc, ts, tl, hs, bs, sz):
    return f"{mc}-{sc}-{ts}-{tl}-{hs}-{bs}-{sz}"

def get_hash(s:"str") -> "str":
    return hashlib.md5(s.encode("utf-8")).hexdigest()

def calculate_hash(c, t, verbose=False) -> "str":
    tv = get_tag_vector(t)
    ts = get_title_size(t)
    mc = get_tag_count("meta", tv)
    sc = get_tag_count("script", tv)
    tl = len(tv)
    hs = next_power_of_2(get_head_size(t))
    bs = next_power_of_2(get_body_size(t))
    sz = next_power_of_2(len(c))
    fpr = get_fingerprint(ts, mc, sc, tl, hs, bs, sz)
    cf3 = get_hash(fpr)

    if verbose:
        print("title size:", ts)
        print("meta:",  mc)
        print("script:", sc)
        print("head size:", hs)
        print("body size:", bs)
        print("total size:", sz)
        print("tag_vector:", ','.join(tv))
        print()
        print("CF3:", fpr)
        print("md5:", cf3)
    else:
        print(cf3)

    return cf3


def roundup(x):
    return int(math.ceil(x / 25.0)) * 25

def next_power_of_2(x):
    return 1 if x == 0 else 2**(x - 1).bit_length()


if __name__ == "__main__":
    f = sys.argv[1]
    if len(sys.argv) == 2:
        main(f, verbose=True)

    if len(sys.argv) == 3:
        if sys.argv[2] == "hash":
            main(f)



